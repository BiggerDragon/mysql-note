 1.事务的基本特性
  原子性：一个事务被视为一个最小的工作单元，要么全部执行完，要么回滚不执行，不能只执行一部分。有点类似与并发里面提的原子操作。
  一致性：数据虽然可能再变化，但是状态是一致的
  隔离性：一个事务所做的修改在它提交之前，对其他事务是不可见的
  持久性：事务一旦提交，就会永久的保存在数据库
2.事务的隔离级别，mysql的默认隔离级别是？
  read uncommitted:读未提交，一个事务可以读取另一个事务未提交的数据，隔离级别最低
  read committed:读提交，一个事务要等待另一个事务提交后才能读取数据，避免脏读的发生
  repeatable read:开始读取数据时不再允许修改数据，可避免脏读和不可重复读的发生
                    如果期间有其他事务修改了数据，则读取的是修改之前的数据。
  serializable:串行是事务的最高隔离级别，在该级别下，事务串行顺序执行，可避免幻读，不可重读和脏读的发生
               效率低
  mysql默认采用repeatable read

3.说一说脏读，不可重复读和幻读
  事务A读取了事务B更新的数据，事务还没有提交就回滚了，则事务A读取到的数据就是脏数据;
  事务A多次读取同一数据，但在读取期间，事务B更新了数据，导致事务A多次读取的数据不一样。
  当两个完全一样的查询执行时，第二次查的结果和第一次不一样

4.数据表类型有
   MyIASM:不支持事务，不支持外键
   InnoDB:支持事务，支持外键
5.sql优化
    1.尽量避免全表扫描，首先考虑在where和order by涉及的列上建立索引
    2.应尽量避免在where子句中进行null值判断，否则将导致引擎放弃索引从而全表扫描
      所以最好不要允许数据库字段为NULL,不要以为NULL不占空间，向char(100)这种列，空间是固定的，
      除非向varchar这种变长字段，NULL值才不占空间。
    3.应尽量避免在where子句中使用!=或者<>这种操作符，否则将导致放弃索引全表扫描。
    4.应尽量避免在where子句中使用or来连接条件，如果连接的字段一个有索引，而另一个没有索引，则导致全表扫描。
        可以使用union all来将查询结果合并
    5.in 和 not in 也要慎用，否则会导致全表扫描，如：
        select id from t where num in(1,2,3)
        对于连续的数值，能够使用between and就不使用in了
        select id from t where num between 1 and 3
        很多时候用 exists 代替 in 是一个好的选择：
        select num from t where num in(select num from b)
        select num from t where exists(select num from b where a.num=b.num)
    6.select id from t where name like ‘%abc%’会导致全表扫描
      若要提高效率，可以考虑全文检索。

    7.应尽量避免在 where 子句中对字段进行表达式操作，这将导致引擎放弃使用索引而进行全表扫描

    8.应尽量避免在where子句中对字段进行函数操作，这将导致引擎放弃使用索引而进行全表扫描。如：
    select id from t where substring(name,1,3) = ’abc’
    select id from t where createdate >= '2005-11-30' and createdate < '2005-12-1'
    9.不要在 where 子句中的“=”左边进行函数、算术运算或其他表达式运算，否则系统将可能无法正确使用索引。

    10.在使用索引字段作为条件时，如果该索引是复合索引，那么必须使用到该索引中的第一个字段作为条件时才能保证系统使用该索引，
    否则该索引将不会被使用，并且应尽可能的让字段顺序与索引顺序相一致。

    11.Update 语句，如果只更改1、2个字段，不要Update全部字段，否则频繁调用会引起明显的性能消耗，同时带来大量日志。

    12.对于多张大数据量（这里几百条就算大了）的表JOIN，要先分页再JOIN，否则逻辑读会很高，性能很差

    13.select count(*) from table；这样不带任何条件的count会引起全表扫描，并且没有任何业务意义，是一定要杜绝的

    14.索引并不是越多越好，索引固然可以提高相应的 select 的效率，但同时也降低了 insert 及 update 的效率，
    因为 insert 或 update 时有可能会重建索引，所以怎样建索引需要慎重考虑，
    视具体情况而定。一个表的索引数最好不要超过6个，若太多则应考虑一些不常使用到的列上建的索引是否有 必要

    15.应尽可能的避免更新 clustered 索引数据列，因为 clustered 索引数据列的顺序就是表记录的物理存储顺序，
    一旦该列值改变将导致整个表记录的顺序的调整，
    会耗费相当大的资源。若应用系统需要频繁更新 clustered 索引数据列，那么需要考虑是否应将该索引建为 clustered 索引

    16.尽量使用数字型字段，若只含数值信息的字段尽量不要设计为字符型，这会降低查询和连接的性能，并会增加存储开销。
    这是因为引擎在处理查询和连 接时会逐个比较字符串中每一个字符，而对于数字型而言只需要比较一次就够了

    17.尽可能的使用 varchar/nvarchar 代替 char/nchar ，因为首先变长字段存储空间小，
    可以节省存储空间，其次对于查询来说，在一个相对较小的字段内搜索效率显然要高些。

    18.尽量使用表变量来代替临时表。如果表变量包含大量数据，请注意索引非常有限（只有主键索引）

    19.在新建临时表时，如果一次性插入数据量很大，那么可以使用 select into 代替 create table，
    避免造成大量 log ，以提高速度；如果数据量不大，为了缓和系统表的资源，应先create table，然后insert

    20.如果使用到了临时表，在存储过程的最后务必将所有的临时表显式删除，
    先 truncate table ，然后 drop table ，这样可以避免系统表的较长时间锁定

    21.尽量避免使用游标，因为游标的效率较差，如果游标操作的数据超过1万行，那么就应该考虑改写。

    22.使用基于游标的方法或临时表方法之前，应先寻找基于集的解决方案来解决问题，基于集的方法通常更有效

    23.尽量避免大事务操作，提高系统并发能力。

    24.尽量避免向客户端返回大数据量，若数据量过大，应该考虑相应需求是否合理


6.存储过程in,out,inout参数的区别？
    in:表示该参数的值必须在调用存储过程时指定，在存储过程中修改该参数的值不能被返回，为默认值
        仅需要将数据传入存储过程，并不需要返回计算后的该值。
    out:该值可在存储过程内部被改变，并可返回,不接受外部传入的数据，仅返回计算之后的值。

    inout:调用时指定，并且可被改变和返回,需要数据传入存储过程经过调用计算后，再传出返回值
7.触发器是与表有关的数据库对象，在满足定义条件时触发，并执行触发器中定义的语句集合
    1、有begin end体，begin end;之间的语句可以写的简单或者复杂
    　　2、什么条件会触发：I、D、U
    　　3、什么时候触发：在增删改前或者后
    　　4、触发频率：针对每一行执行
    　　5、触发器定义在表上，附着在表上。
      也就是由事件来触发某个操作，事件包括INSERT语句，UPDATE语句和DELETE语句；可以协助应用在数据库端确保数据的完整性
      注意:cannot associate a trigger with a TEMPORARY table or a view.
      触发器尽量少的使用，因为不管如何，它还是很消耗资源
      触发器是针对每一行的；
      对增删改非常频繁的表上切记不要使用触发器，因为它会非常消耗资源

8.视图是可视化的表。
    在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。
    视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。
    我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表

9.sql通配符
    %:代表一个或者多个字符
    -:仅代表一个字符
    [charlist]:中括号任意单一字符
    [^charlist]:除括号中任意单一字符
10.JOIN、LEFT JOIN、RIGHT JOIN 、FULL JOIN的区别?
    join 是inner join的缩写,只返回两个表中连接字段相等的行
    left join :返回左表所有行和右表连接相同的行
    right join:返回右表所有行和坐标连接字段向同的行
    full join:mysql不支持full join 使用union

11.union和union all的区别?
    union自动压缩重复的结果集，union all不压缩

12.Mysql不支持select into from
    SELECT INTO BACK_UP_TABLE FROM ：BACK_UP_TABLE不存在自动创建
    insert into t1(a,b,c) select a,b,c from t2;

13.sql约束
    not null
    unique：mysql 使用UNIQUE (Id_P)来指定唯一索引约束
            如果未多个列组合唯一索引:
            constraint uk_name unique(c1, c2);
            修改表时添加：
            ALTER TABLE Persons
            ADD UNIQUE (Id_P)
            多个列
            ALTER TABLE Persons
            ADD CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)

            drop：
            mysql:alter table table_name drop index index_name;
            oracle:alter table table_name drop contraint unique_name

    primary key:mysql 使用primary key(列名)
                多列组合:
                    constraint pr_key_name primark key(c1, c2)
                 alter table table_name add
                 primary key(c1)

                 alter table table_name add
                 constraint pr_key_name primary key(c1, c2)

                 alter table table_name drop primary key

                 alter table table_name drop constraint pK

    foreign key:一个表中的外键指向另一个表中的主键
            foreign key(c1) references table_name(c2)
            constraint f_k foreign key(c1, c2) references table_name(c2)

    default:约束用于向列中插入默认值
    check:约束用于限制列的值的范围


14.索引
    create index index_name on table(列名)
    drop index index_name on table_name
    ALTER TABLE table_name DROP INDEX index_name


15.1. 创建索引是为产生索引文件的，占用磁盘空间

   2. 索引文件是一个二叉树类型的文件，可想而知我们的dml操作同样也会对索引文件进行修改，所以性能会下降